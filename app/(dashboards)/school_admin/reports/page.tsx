"use client";
import { useState } from 'react';
import { 
  FiDownload, 
  FiPrinter, 
  FiFilter, 
  FiCalendar, 
  FiBarChart2, 
  FiUser, 
  FiBook,
  FiDollarSign,
  FiClock,
  FiMail,
  FiShare2,
  FiX,
  FiFileText
} from 'react-icons/fi';
import { Button } from "@/components/ui/button";
import { Loader } from "@/components/ui/loader";

// Types
interface Report {
  id: number;
  title: string;
  type: 'student' | 'teacher' | 'financial' | 'attendance';
  description: string;
  dateGenerated: string;
  period: string;
  generatedBy: string;
  status: 'ready' | 'processing' | 'failed';
  downloadUrl?: string;
  parameters: {
    name: string;
    value: string;
  }[];
  summary?: {
    label: string;
    value: string;
  }[];
}

// ReportDetailModal component
const ReportDetailModal = ({ report, onClose }: { report: Report, onClose: () => void }) => {
  const [isSending, setIsSending] = useState(false);
  const [isSharing, setIsSharing] = useState(false);

  const getReportIcon = () => {
    switch (report.type) {
      case 'student': return <FiUser className="text-blue-500 w-6 h-6" />;
      case 'teacher': return <FiUser className="text-purple-500 w-6 h-6" />;
      case 'financial': return <FiDollarSign className="text-green-500 w-6 h-6" />;
      case 'attendance': return <FiBook className="text-orange-500 w-6 h-6" />;
      default: return <FiBarChart2 className="text-gray-500 w-6 h-6" />;
    }
  };

  const getStatusBadge = () => {
    switch (report.status) {
      case 'ready': return 'bg-green-100 text-green-800';
      case 'processing': return 'bg-blue-100 text-blue-800';
      case 'failed': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  return (
    <div className="fixed inset-0 z-50 overflow-y-auto">
      <div className="flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
        <div className="fixed inset-0 transition-opacity" aria-hidden="true" onClick={onClose}>
          <div className="absolute inset-0 bg-gray-500 opacity-75"></div>
        </div>

        <div className="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-4xl sm:w-full">
          <div className="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
            <div className="flex justify-between items-start">
              <div className="flex items-start space-x-4">
                <div className="mt-1 flex-shrink-0">{getReportIcon()}</div>
                <div>
                  <h3 className="text-2xl leading-6 font-bold text-gray-900">{report.title}</h3>
                  <div className="mt-1 flex flex-wrap items-center gap-2">
                    <span className={`px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusBadge()}`}>
                      {report.type.charAt(0).toUpperCase() + report.type.slice(1)} Report
                    </span>
                    <span className="inline-flex items-center text-sm text-gray-500">
                      <FiClock className="mr-1.5 h-4 w-4 text-gray-400" />
                      Generated on {new Date(report.dateGenerated).toLocaleDateString('en-US', {
                        year: 'numeric',
                        month: 'short',
                        day: 'numeric',
                        hour: '2-digit',
                        minute: '2-digit'
                      })}
                    </span>
                  </div>
                </div>
              </div>
              <button onClick={onClose} className="bg-white rounded-md text-gray-400 hover:text-gray-500">
                <span className="sr-only">Close</span>
                <FiX className="h-6 w-6" />
              </button>
            </div>

            {report.description && (
              <div className="mt-4">
                <p className="text-sm text-gray-600">{report.description}</p>
              </div>
            )}

            <div className="mt-6 border-t border-gray-200"></div>

            <div className="mt-6 grid grid-cols-1 gap-6 sm:grid-cols-2">
              <div>
                <h4 className="text-lg font-medium text-gray-900 mb-4">Report Details</h4>
                <div className="space-y-4">
                  <div>
                    <dt className="text-sm font-medium text-gray-500">Period Covered</dt>
                    <dd className="mt-1 text-sm text-gray-900 flex items-center">
                      <FiCalendar className="mr-2 h-4 w-4 text-gray-400" />
                      {report.period}
                    </dd>
                  </div>

                  <div>
                    <dt className="text-sm font-medium text-gray-500">Generated By</dt>
                    <dd className="mt-1 text-sm text-gray-900">{report.generatedBy}</dd>
                  </div>

                  <div>
                    <dt className="text-sm font-medium text-gray-500">Status</dt>
                    <dd className="mt-1">
                      <span className={`px-2.5 py-1 rounded-full text-xs font-medium ${getStatusBadge()}`}>
                        {report.status.charAt(0).toUpperCase() + report.status.slice(1)}
                      </span>
                    </dd>
                  </div>

                  {report.parameters.length > 0 && (
                    <div>
                      <dt className="text-sm font-medium text-gray-500">Parameters</dt>
                      <dd className="mt-1">
                        <ul className="border border-gray-200 rounded-md divide-y divide-gray-200">
                          {report.parameters.map((param, index) => (
                            <li key={index} className="pl-3 pr-4 py-3 flex items-center justify-between text-sm">
                              <div className="w-0 flex-1 flex items-center">
                                <FiFileText className="flex-shrink-0 h-4 w-4 text-gray-400" />
                                <span className="ml-2 flex-1 w-0 truncate">{param.name}</span>
                              </div>
                              <div className="ml-4 flex-shrink-0 font-medium text-gray-900">
                                {param.value}
                              </div>
                            </li>
                          ))}
                        </ul>
                      </dd>
                    </div>
                  )}
                </div>
              </div>

              <div>
                <h4 className="text-lg font-medium text-gray-900 mb-4">Key Metrics</h4>
                {report.summary && report.summary.length > 0 ? (
                  <div className="bg-gray-50 rounded-lg p-4">
                    <dl className="grid grid-cols-1 gap-5 sm:grid-cols-2">
                      {report.summary.map((item, index) => (
                        <div key={index} className="px-4 py-3 bg-white shadow rounded-lg overflow-hidden">
                          <dt className="text-sm font-medium text-gray-500 truncate">{item.label}</dt>
                          <dd className="mt-1 text-2xl font-semibold text-gray-900">{item.value}</dd>
                        </div>
                      ))}
                    </dl>
                  </div>
                ) : (
                  <div className="text-center py-8 bg-gray-50 rounded-lg">
                    <FiBarChart2 className="mx-auto h-12 w-12 text-gray-400" />
                    <h3 className="mt-2 text-sm font-medium text-gray-900">No summary available</h3>
                    <p className="mt-1 text-sm text-gray-500">This report doesn&apos;t include key metrics.</p>
                  </div>
                )}

                <div className="mt-6">
                  <h4 className="text-sm font-medium text-gray-500 mb-2">Preview</h4>
                  <div className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center">
                    <FiFileText className="mx-auto h-12 w-12 text-gray-400" />
                    <h3 className="mt-2 text-sm font-medium text-gray-900">Report preview</h3>
                    <p className="mt-1 text-sm text-gray-500">
                      {report.downloadUrl 
                        ? "Click download to view full report" 
                        : "No preview available for this report"}
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div className="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
            <div className="flex space-x-3">
              {report.downloadUrl && (
                <Button
                  variant="primary"
                  className="inline-flex items-center"
                  onClick={() => window.open(report.downloadUrl, '_blank')}
                >
                  <FiDownload className="-ml-1 mr-2 h-5 w-5" />
                  Download
                </Button>
              )}
              
              <Button variant="outline" onClick={() => setIsSending(!isSending)}>
                <FiMail className="-ml-1 mr-2 h-5 w-5" />
                {isSending ? 'Sending...' : 'Email'}
              </Button>
              
              <Button variant="outline" onClick={() => setIsSharing(!isSharing)}>
                <FiShare2 className="-ml-1 mr-2 h-5 w-5" />
                {isSharing ? 'Sharing...' : 'Share'}
              </Button>
              
              <Button variant="outline">
                <FiPrinter className="-ml-1 mr-2 h-5 w-5" />
                Print
              </Button>
            </div>
            
            <Button variant="ghost" onClick={onClose} className="mt-3 sm:mt-0 sm:mr-3">
              Close
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
};

// Main ReportsPage component
const ReportsPage = () => {
  const [selectedReportType, setSelectedReportType] = useState<string>('all');
  const [dateRange, setDateRange] = useState<string>('last-month');
  const [isGenerating, setIsGenerating] = useState(false);
  const [activeTab, setActiveTab] = useState<'saved' | 'history'>('saved');
  const [selectedReport, setSelectedReport] = useState<Report | null>(null);

  // Sample data
  const savedReports: Report[] = [
    {
      id: 1,
      title: "Student Enrollment Summary",
      type: 'student',
      description: "Detailed breakdown of student enrollment by grade and demographic",
      dateGenerated: "2023-11-15T09:30:00",
      period: "Fall 2023",
      generatedBy: "Admin User",
      status: 'ready',
      downloadUrl: "#",
      parameters: [
        { name: "School Year", value: "2023-2024" },
        { name: "Grade Levels", value: "K-12" }
      ],
      summary: [
        { label: "Total Students", value: "1,245" },
        { label: "New Enrollments", value: "187" },
        { label: "Returning Students", value: "1,058" }
      ]
    },
    {
      id: 2,
      title: "Teacher Performance Metrics",
      type: 'teacher',
      description: "Evaluation scores and classroom performance metrics",
      dateGenerated: "2023-11-10T14:15:00",
      period: "Quarter 1 2023-24",
      generatedBy: "Principal Smith",
      status: 'ready',
      downloadUrl: "#",
      parameters: [
        { name: "Evaluation Period", value: "Aug-Oct 2023" },
        { name: "Minimum Observations", value: "3" }
      ],
      summary: [
        { label: "Avg. Evaluation Score", value: "4.2/5" },
        { label: "Teachers Evaluated", value: "84" }
      ]
    }
  ];

  const reportHistory: Report[] = [
    ...savedReports,
    {
      id: 3,
      title: "Monthly Financial Statement",
      type: 'financial',
      description: "Revenue and expenses breakdown for the month",
      dateGenerated: "2023-11-05T16:45:00",
      period: "October 2023",
      generatedBy: "Finance Dept",
      status: 'ready',
      parameters: [
        { name: "Fiscal Year", value: "2024" },
        { name: "Currency", value: "USD" }
      ],
      summary: [
        { label: "Total Revenue", value: "$284,567" },
        { label: "Total Expenses", value: "$198,432" }
      ]
    }
  ];

  const filteredReports = activeTab === 'saved' 
    ? savedReports.filter(report => selectedReportType === 'all' || report.type === selectedReportType)
    : reportHistory.filter(report => selectedReportType === 'all' || report.type === selectedReportType);

  const generateNewReport = () => {
    setIsGenerating(true);
    setTimeout(() => setIsGenerating(false), 2000);
  };

  const getReportIcon = (type: string) => {
    switch (type) {
      case 'student': return <FiUser className="text-blue-500" />;
      case 'teacher': return <FiUser className="text-purple-500" />;
      case 'financial': return <FiDollarSign className="text-green-500" />;
      case 'attendance': return <FiBook className="text-orange-500" />;
      default: return <FiBarChart2 className="text-gray-500" />;
    }
  };

  if (isGenerating) {
    return (
      <div className="fixed inset-0 flex items-center justify-center w-full h-full bg-white bg-opacity-75 z-50">
        <div className="flex flex-col items-center">
          <Loader className="text-blue-600 w-12 h-12" />
          <p className="mt-4 text-sm text-slate-500">Generating your report...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="w-full max-w-full px-4 sm:px-6 lg:px-8 py-6 bg-gray-50 min-h-screen">
      {/* Header */}
      <div className="w-full flex flex-col md:flex-row justify-between items-start md:items-center mb-8 gap-4">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">School Reports</h1>
          <p className="text-gray-600 mt-1">
            Generate, view and manage institutional reports
          </p>
        </div>
        
        <Button
          onClick={generateNewReport}
          variant="primary"
          className="inline-flex items-center"
        >
          <FiBarChart2 className="-ml-1 mr-2 h-5 w-5" />
          Generate New Report
        </Button>
      </div>

      {/* Tabs */}
      <div className="flex border-b border-gray-200 mb-6">
        <button
          onClick={() => setActiveTab('saved')}
          className={`px-4 py-2 font-medium text-sm flex items-center gap-2 ${activeTab === 'saved' ? 'text-blue-600 border-b-2 border-blue-600' : 'text-gray-500 hover:text-gray-700'}`}
        >
          <span>Saved Reports</span>
          <span className="bg-gray-100 text-gray-600 px-2 py-0.5 rounded-full text-xs">
            {savedReports.length}
          </span>
        </button>
        <button
          onClick={() => setActiveTab('history')}
          className={`px-4 py-2 font-medium text-sm flex items-center gap-2 ${activeTab === 'history' ? 'text-blue-600 border-b-2 border-blue-600' : 'text-gray-500 hover:text-gray-700'}`}
        >
          <span>Report History</span>
          <span className="bg-gray-100 text-gray-600 px-2 py-0.5 rounded-full text-xs">
            {reportHistory.length}
          </span>
        </button>
      </div>

      {/* Filters */}
      <div className="w-full bg-white p-4 rounded-xl shadow-sm mb-6 grid grid-cols-1 md:grid-cols-3 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Report Type</label>
          <select
            value={selectedReportType}
            onChange={(e) => setSelectedReportType(e.target.value)}
            className="block w-full pl-3 pr-10 py-2.5 border border-gray-200 rounded-lg bg-gray-50 focus:ring-2 focus:ring-blue-200 focus:border-blue-500 transition-all"
          >
            <option value="all">All Types</option>
            <option value="student">Student Reports</option>
            <option value="teacher">Teacher Reports</option>
            <option value="financial">Financial Reports</option>
            <option value="attendance">Attendance Reports</option>
          </select>
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Date Range</label>
          <select
            value={dateRange}
            onChange={(e) => setDateRange(e.target.value)}
            className="block w-full pl-3 pr-10 py-2.5 border border-gray-200 rounded-lg bg-gray-50 focus:ring-2 focus:ring-blue-200 focus:border-blue-500 transition-all"
          >
            <option value="last-week">Last Week</option>
            <option value="last-month">Last Month</option>
            <option value="last-quarter">Last Quarter</option>
            <option value="last-year">Last Year</option>
            <option value="custom">Custom Range</option>
          </select>
        </div>
        
        <div className="flex items-end">
          <Button variant="outline" className="inline-flex items-center">
            <FiFilter className="-ml-1 mr-2 h-5 w-5" />
            Apply Filters
          </Button>
        </div>
      </div>

      {/* Reports Table */}
      <div className="w-full bg-white rounded-xl shadow-sm overflow-hidden">
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Report
                </th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Generated On
                </th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Period
                </th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Generated By
                </th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Status
                </th>
                <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Actions
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {filteredReports.length > 0 ? (
                filteredReports.map((report) => (
                  <tr 
                    key={report.id} 
                    onClick={() => setSelectedReport(report)}
                    className="hover:bg-gray-50 cursor-pointer"
                  >
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex items-center">
                        <div className="flex-shrink-0">
                          {getReportIcon(report.type)}
                        </div>
                        <div className="ml-4">
                          <div className="text-sm font-medium text-gray-900">{report.title}</div>
                          <div className="text-sm text-gray-500 capitalize">{report.type}</div>
                        </div>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-gray-900">
                        {new Date(report.dateGenerated).toLocaleDateString('en-US', {
                          year: 'numeric',
                          month: 'short',
                          day: 'numeric'
                        })}
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-gray-900">{report.period}</div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-gray-900">{report.generatedBy}</div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={`px-2.5 py-1 rounded-full text-xs font-medium ${
                        report.status === 'ready' ? 'bg-green-100 text-green-800' :
                        report.status === 'processing' ? 'bg-blue-100 text-blue-800' :
                        'bg-red-100 text-red-800'
                      }`}>
                        {report.status.charAt(0).toUpperCase() + report.status.slice(1)}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <div className="flex justify-end gap-2">
                        {report.downloadUrl && (
                          <a
                            href={report.downloadUrl}
                            onClick={(e) => e.stopPropagation()}
                            className="text-blue-600 hover:text-blue-900 p-2 rounded-full hover:bg-blue-50 transition-colors"
                            title="Download"
                          >
                            <FiDownload className="w-5 h-5" />
                          </a>
                        )}
                        <button
                          onClick={(e) => e.stopPropagation()}
                          className="text-gray-600 hover:text-gray-900 p-2 rounded-full hover:bg-gray-50 transition-colors"
                          title="Print"
                        >
                          <FiPrinter className="w-5 h-5" />
                        </button>
                      </div>
                    </td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td colSpan={6} className="px-6 py-12 text-center">
                    <div className="flex flex-col items-center justify-center">
                      <FiBarChart2 className="w-12 h-12 text-gray-400 mb-4" />
                      <h3 className="text-lg font-medium text-gray-900 mb-1">No reports found</h3>
                      <p className="text-gray-500 max-w-md text-center">
                        {selectedReportType !== 'all' 
                          ? `No ${selectedReportType} reports available for the selected filters.`
                          : 'No reports have been generated yet.'}
                      </p>
                    </div>
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      </div>

      {/* Report Detail Modal */}
      {selectedReport && (
        <ReportDetailModal 
          report={selectedReport} 
          onClose={() => setSelectedReport(null)} 
        />
      )}
    </div>
  );
};

export default ReportsPage;